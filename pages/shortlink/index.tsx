import {
  Button,
  TextField,
  Grid,
  Paper,
  Typography,
  Box,
  makeStyles,
  List,
  ListItem,
} from '@material-ui/core'
import { Alert } from '@material-ui/lab'
import { CopyToClipboard } from 'react-copy-to-clipboard'
import { useSnackbar } from 'notistack'
import React, { useEffect, useState } from 'react'
import { Controller, useForm } from 'react-hook-form'
import { useAuth } from 'components/auth'
import { db } from 'lib/app'
import { NextPage } from 'next'
import { domains } from 'lib/config'
import roles from 'lib/auth/roles'

type FormValues = {
  url: string
  id?: string
}

const useStyles = makeStyles({
  root: {
    padding: '1rem',
    marginTop: '1rem',
    '&  .MuiInputBase-root': { marginRight: '1rem' },
    '& .MuiTypography-caption': { alignSelf: 'flex-end' },
    '& .MuiBox-root:last-of-type': { marginTop: '1rem' },
    '& .MuiButton-containedPrimary': { marginTop: '1.5rem' },
    '& .MuiFormControlLabel-root': {
      marginRight: '1rem',
      flexShrink: 0,
      marginBottom: 0,
    },
  },
})

const ShortLinkAddPage: NextPage = () => {
  const { user } = useAuth()

  const classes = useStyles()

  const [shortlink, setShortlink] = useState<string | undefined>(undefined)
  const [firstTen, setFirstTen] = useState<
    Array<firebase.default.firestore.QueryDocumentSnapshot>
  >([])

  const {
    control,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<FormValues>({
    defaultValues: {
      url: '',
      id: '',
    },
  })

  useEffect(() => {
    db.collection('shortlinks')
      .limit(10)
      .get()
      .then((res) => setFirstTen(res.docs))
  }, [])

  const handleSuccess = ({ id }: { id: string }) => {
    console.log('Document written with ID: ' + id)
    enqueueSnackbar('Successfully added shortlink:', {
      variant: 'success',
    })
    setShortlink(`${domains.short}/s/${id}`)
    reset()
  }

  const { enqueueSnackbar } = useSnackbar()
  const handleAdd = ({ url, id }: FormValues) => {
    if (!id) {
      db.collection('shortlinks')
        .add({ url, creatorID: user?.uid })
        .then(handleSuccess)
        .catch(handleError)
    } else {
      db.collection('shortlinks')
        .doc(id)
        .get()
        .then(({ exists }) => {
          if (exists) {
            enqueueSnackbar(
              'This ID already exists. Choose a new one or let one be auto generated by leaving the field empty.',
              {
                variant: 'error',
              }
            )
          } else {
            db.collection('shortlinks')
              .doc(id)
              .set({ url, creatorID: user?.uid })
              .then(() => handleSuccess({ id }))
              .catch(handleError)
          }
        })
    }
  }

  const handleError = () => {
    console.log(errors)
    enqueueSnackbar(
      'There was an error with the form: ' + errors.url?.message,
      {
        variant: 'error',
      }
    )
  }

  const form = (
    <Box>
      <Grid container direction="column" spacing={2}>
        <Grid item>
          <Typography variant="h5" component="h3">
            Enter complete URL:
          </Typography>
          <Controller
            name={'url'}
            control={control}
            rules={{
              required: {
                value: true,
                message: 'Please provide a url',
              },
            }}
            render={({ field }) => (
              <TextField
                id="input-url"
                label="URL"
                fullWidth
                required
                aria-required
                {...field}
              />
            )}
          />
          <Grid item>
            <Controller
              name={'id'}
              control={control}
              render={({ field }) => (
                <TextField
                  id="input-id"
                  label="ID (can be left empty to auto generate ID)"
                  fullWidth
                  {...field}
                />
              )}
            />
          </Grid>
        </Grid>
      </Grid>
      <Button
        variant="contained"
        color="primary"
        onClick={handleSubmit(handleAdd, handleError)}
        fullWidth
      >
        Add new Shortlink
      </Button>
    </Box>
  )

  const shortlinkDisplay = (
    <>
      <Typography variant="h5" component="h3">
        Your Shortlink is:
      </Typography>

      <CopyToClipboard
        text={shortlink}
        variant="contained"
        onCopy={() =>
          enqueueSnackbar('Successfully copied link!', {
            variant: 'success',
          })
        }
      >
        <Button color="primary" style={{ height: 'fit-content' }}>
          {shortlink}
        </Button>
      </CopyToClipboard>
      <br />
      <Button onClick={() => setShortlink(undefined)} color="primary">
        Generate new Shortlink
      </Button>
    </>
  )

  return (
    <>
      <Typography component="h1" variant="h3" gutterBottom>
        AK Video - Shortlink Service
      </Typography>
      <Typography component="h2" variant="h4" gutterBottom>
        Add a new shortlink:
      </Typography>

      {!user ? (
        <Alert severity="info">
          You are currently not logged in. This means you cannot add new
          shortlinks.
        </Alert>
      ) : (
        <>
          <Paper className={classes.root}>{form}</Paper>
          {shortlink && (
            <Paper className={classes.root}>{shortlinkDisplay}</Paper>
          )}
          {user?.role === roles.Admin && (
            <Paper className={classes.root}>
              <Typography variant="h5" component="h3">
                View first 10 shortlinks:
              </Typography>
              <List dense>
                {firstTen.map((doc) => (
                  <ListItem key={doc.id}>
                    <Typography>
                      {`${doc.id} => `}
                      <a href={doc.data().url}>{doc.data().url}</a>
                    </Typography>
                  </ListItem>
                ))}
              </List>
              <Button
                onClick={() =>
                  db
                    .collection('shortlinks')
                    .startAfter(firstTen[firstTen.length - 1])
                    .limit(10)
                    .get()
                    .then((res) => {
                      console.log(res)
                      setFirstTen(res.docs)
                    })
                    .catch(console.log)
                }
              >
                Get next 10
              </Button>
            </Paper>
          )}
        </>
      )}
    </>
  )
}

export default ShortLinkAddPage
